---
title: "Untitled"
author: "陳厚銘"
date: "2020/6/16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.


```{r}
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum4 <- c() # 空向量
```

```{r}
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
vNum3

```

```{r}
dialogue <- c('小明說："明天不用上課。"',
               '小花說："真的嗎？"')

cat(dialogue, sep="\n")
```
 
```{r}
num <- c(1.5)
int <- c(1L, 3L, -2L)
char <- c("1.5","2","3")
logi <- c(T,T,F)

typeof(num)
typeof(int)
typeof(char)
typeof(logi)
```

```{r}
class(num)
class(int)
class(char)
class(logi)
```
 
```{r}
# 10位學生的主系
majors10_char <- c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')

typeof(majors10_char)
class(majors10_char)

```
 
```{r}
majors10_factor <- factor(majors10_char)
# 或
majors10_factor <- factor(
  c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
)

typeof(majors10_factor)
class(majors10_factor)

majors10_char

majors10_factor

as.integer(majors10_factor) 
levels(majors10_factor)
```
 
```{r}
library(lubridate)
ymd_hms(
c("2020-03-18 13:52:40","2020-03-11 03:12:40")
)


```
 
```{r}
vectorExample
vectorExample[c(1, 3)]
```
 
```{r}
listExample<- list(
  學期=123,
  名字="asd"
)
listExample
```
```{r}
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get2
```
 
```{r}
today <- list(list("台北市", highest_temp = 25, lowest_temp = 18), list("新北市", 
    highest_temp = 24, lowest_temp = 15))
tomorrow <- list(list("台北市", highest_temp = 25, lowest_temp = 18), list("新北市", 
    chighest_temp = 24, lowest_temp = 15))

weather <- list(today, tomorrow)

str(weather)
```
```{r}
weather[[1]][[2]][[2]]  # 今天/新北市/highest_temp
weather[[2]][[2]][[2]]  # 明天/新北市/highest_temp
```
 
```{r}
library(lubridate)
list1 <- list(list(name = "Jack", birthday = ymd("1998-03-21"), status = c(height = 177, 
    weight = 80)))

str(list1)
```
```{r}
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")

# 新增資料
list1[[2]] <- list(name = "Mary", birthday = ymd("1998-08-24"))

str(list1)
list1[[1]][["age"]] <- list(21)
list1[[2]][["age"]] <- list(21)

# 改變「一個」時，使用[[ ]]比較不會錯。
str(list1)
```
```{r}
a <- c("1", "b", "TRUE")
a
a[[2]] <- "c"  # 元素存在: 替換
a[[4]] <- "7"  # 元素不存在： 增加
a[c(5, 6)] <- c("J", "K")
a
```
 
```{r}
print(a)
a[-c(1, 3)]
a[c(-2)]

print(a)
a  # 要回存才算真的刪除
 <- a[-c(1, 3)]
```
 
```{r}
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
```
 
```{r}
# 各學屆2年級人數
table(transcript100to103$學屆)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
# 各學屆2年級人數
table(transcript100to103$學屆)->ad
as.integer(ad)
# 各學屆2年級成績大於85年數
table(transcript100to103$學屆[pick_above85])
```
 
```{r}
list_victimAges_female <- jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", 
    simplifyDataFrame = F)
```
 
```{r}
str(list_victimAges_female)
View(list_victimAges_female$數目)
sum(list_victimAges_female$數目)
sum(list_victimAges_female$數目, na.rm = T)
```
```{r}
list_victimAges_female$數目 <- as.integer(list_victimAges_female$數目)
list_victimAges_female$年齡層 <- as.factor(list_victimAges_female$年齡層)
```
 
```{r}
levels_ages <- levels(list_victimAges_female$年齡層)
print(levels_ages)
```
 
```{r}
levels_new <- c(levels_ages[c(12, 13, 1, 8, 2:7, 9:11)])
levels(list_victimAges_female$年齡層) <- levels_new
levels(list_victimAges_female$年齡層)
```
```{r}
# 先將類別資料設定成可排序類別資料
list_victimAges_female$年齡層 <- ordered(list_victimAges_female$年齡層)
pick_above30 <- list_victimAges_female$年齡層 >= "30_39歲"

```
```{r}
fruit <- c("apple", "banana", "pear", "pinapple")
```
 
```{r}
library(stringr)
str_detect(fruit, "[aeiou]")
```

```{r}
str_extract_all(c("民國108年12月5日", "民國98年10月5日"), "(?<=民國)[0-9]{2,3}(?=年)")  # 回傳list 

str_extract(c("民國108年12月5日", "民國98年10月5日"), "(?<=民國)[0-9]{2,3}(?=年)")  # 回傳vector 
str_sub("410873002", 5, 6)
```
 
```{r}
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra, "色")  # 檢視
str_count(heartSutra, "色")  # 計數
```
 
```{r}
Ids <- c("A283743192", "B829103720", "A10920402", "C291022384")

str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]")  # 偵測 出現A、C

str_extract(Ids, "[A-Z]")  # 取出 A-Z的字元
```
```{r}
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)"  # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1, strip2, strip3)
print(myRegexSlotMachine)
```
 
```{r}
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(c(claimA, claimB, claimC), pattern = myRegexSlotMachine)
# 是否有吻合的出象
str_detect(c(claimA, claimB, claimC), pattern = myRegexSlotMachine)
```
 
```{r}
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
```
 
 
```{r}
# 顯示所有符合規則的
str_view_all(headline, "謝陳官")  # 固定字組
str_count(headline, "謝陳官")

str_view_all(headline, "[謝陳官]")  # 有1個strip: 出象有3個可能字元 
str_count(headline, "[謝陳官]")

str_view_all(headline, "謝無雙|官求敗")  # 有1個strip，出象有2個字組 
str_count(headline, "謝無雙|官求敗")

str_view_all(headline, "陳[^官]")  # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
```
 
```{r}
addresses <- c("臺中市后里區公館里尾社路385號", "新竹市東區科學園路125號1樓", 
    "新竹市北區竹光路99號", "金門縣金城鎮賢庵里山前33號", "臺中市南屯區工業區二十四路23號1樓")
```
```{r}
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses, myRegexSlotMachine)
str_extract(addresses, myRegexSlotMachine)

str_view_all(addresses, "[0-9]+")  # 樓號也會選到
```
```{r}
twDate <-  c("民國108年12月5日","民國98年10月5日")

library(stringr)
# 準備regex: 
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"

target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"

regex_pattern <- glue::glue(
  "(?<={A_regex}){target_regex}(?={B_regex})"
  )

print(regex_pattern)

## 如果同學已經很熟就可以直接寫
regex_pattern <-
  "(?<=民國)[0-9]+(?=年)"

# 取出民國年，計算西元年
year <- 
  str_extract(
    twDate,
    regex_pattern)
westernYear <- as.integer(year)+1911
westernYear
# 替換民國xx年的xx成西元年數字
str_replace(
  twDate,
  regex_pattern,  # 要換掉的文字
  as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)


lubridate::ymd(twDate_reformat)
```
 
```{r}
char2 <- c("蔡英文", "習近平", "Donald Trump", "蔡頭")
factor2 <- factor(char2)
levels(factor2)
str_sub(char2, 1, 1)
sort(str_sub(char2, 1, 1))
sort(str_sub(char2, 2, 2))
```
 
```{r}
population <- jsonlite::fromJSON("https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1")
population <- unlist(population)
```

```{r}
covid19 <- jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json")
print(population)
class(population)  # 判斷出是named integer vector
names(population)  # 元素名稱是台灣各縣市
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男", "女"))
```

```{r}
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <- factor(covid19$縣市)
covid19$性別 <- factor(covid19$性別)
covid19$是否為境外移入 <- factor(covid19$是否為境外移入)
levels(covid19$縣市)  # 是名稱字串向量

# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levelsInData <- levels(covid19$縣市)
population <- population[levelsInData]
```

```{r}
population <- sort(population, decreasing = T)
population
```
 
```{r}
factor1 <- factor(c("新北市", "台北市", "台中市", "彰化市", "基隆市", 
    "苗栗縣", "苗栗縣"))
factor1
```
 
```{r}
levels(factor1) <- c("中部", "北部", "北部", "中部", "北部", "中部")

levels(factor1)
factor1
```
```{r}
factor1 <- factor(c("0-4歲", "5-9歲", "10歲以上", "0-4歲", "5-9歲", "5-9歲", 
    "10歲以上"))
factor1
```
```{r}
levels(factor1) <- c("0-9歲", "10歲以上", "0-9歲")
factor1
```
 
```{r}
levels(covid19$年齡層)

# 創造10歲間距的所有可能
start <- seq(5, 55, by = 10)  # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by = 10)
middleLevels <- rep(paste0(start, "-", end), each = 2)  # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
middleLevels
levels(covid19$年齡層) <- newLevels
covid19$年齡層
```
 
 
